/*20190673 Hyungho Choi readme*/
/*--------------------------------------------------------------------*/
1. Your name.
Hyungho Choi

2. A description of help and collaboration
This submission was constructed alone.

3. Comparison of the implementation of customer_manager using array 
and the one using hash table respectively.

Below are the results for the [-p 2000] results executed in , and 
comments

[Test 1] Register 2000 users with RegisterCustomer()
Finished registering 2000 users

ARRAY: [elapsed time: 16.798000 ms]
HASH : [elapsed time: 3.401000 ms]

[COMMENT-1] The significant factor in registering is (amortized) 
memory allocation.
Hash method took a significantly shorter time as its expansion is 
exponential, and array expansion is linear. For [-p 2000],
Array method: needs 32 expansions
Hash method : needs 5 expansions

[Test 2] Total sum of purchase of 2000 users
         with GetPurchaseByName()
Finished calculating the total sum = 20000

ARRAY: [elapsed time: 9.455000 ms]
HASH : [elapsed time: 0.514000 ms]

[COMMENT-2] Hash method also took shorter time mainly because it takes 
constant time to search.

[Test 3] Total sum of purchase of 2000 users
         with GetPurchaseByID()
Finished calculating the total sum = 20000

ARRAY: [elapsed time: 8.773000 ms]
HASH : [elapsed time: 0.257000 ms]

[COMMENT-3] Hash method also took shorter time mainly because it takes 
constant time to search.

[Test 4] Total sum of purchase of odd number users
         with GetSumCustomerPurchase()
Finished calculating the odd number user sum = 10000

ARRAY: [elapsed time: 0.109000 ms]
HASH : [elapsed time: 0.090000 ms]

[COMMENT-4] Similar Time elapsed, since both method traverses through 
all the bottom-level data linearly

[Test 5] Unregister all the 2000 users
         with UnregisterCustomerByName()
Finished unregistering 2000 users

ARRAY: [elapsed time: 4.319000 ms]
HASH : [elapsed time: 0.340000 ms]

[COMMENT-3] As UnregisterCustomerByName() requires search,
Hash method also took shorter time mainly because it takes constant 
time to search.

[COMMENT-SUMMARY] Hash method is much better in terms of efficiency. 
But it is significantly more complex and taxing in terms of memory.

4. Whether you implemented hash table expansion or not. State which 
functions implement it.
YES.
Hash table expansion is implemented. It is implemented with expand_hash
() function called within RegisterCustomer() function.
expand_hash() function is implemented in line 273-297, while the call 
within RegisterCustomer() is done in line 402-405.
(in customer_manager2.c). Search for comment "EXTRA CREDIT"

5. An indication of how much time you spent doing the assignment.
This submission took 3 full days, that is around 15 hours of coding, 5 
hours of debuging, testing and commenting.

6. Your assessment of the assignment.
It was very fun to see all the theories dicussed in class in action, 
and personally had a hard time beliving the hash implementation was 
experimentally more efficent even though it is much more bulky and 
complex (535 lines vs 347 lines)

7. Any information that will help us to grade your work in the most 
favorable light. In particular you should describe all known bugs.
A printUserInfo(), and printDB() function was added to comprehensively 
show the status of the database.
The hash function was implemented to be independent of the hash size, 
and the hash size was modulated each time when assigning nodes. While 
this can be a little more complex, this makes hash expansion much 
simpler, and searching much more efficeint:
1. when hash-expanding, the hash values do not have to be computed 
again, it just needs to be modulated by the new hash size.
2. when searching, before doing strcmp, its raw hash value is compared 
first to speed up search.

Also, as one can predict, alot of memory leaks happened in development 
of this submission, and I used gdb for the first time to get to where 
it was caused.

I had alot of fun doing this assignment. I hope the TA's have a fun 
time grading it, too.
If my code is incomprehensible, very sorry in advance.
