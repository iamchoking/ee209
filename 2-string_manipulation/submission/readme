1. NAME / ID
Hyungho Choi / 20190673

2. Desciption of help from others
No cooperation was involved in this assignment. Got advice from CLASSUM
 for questions.

3. Is it possible for StrCopy to call assert to verify that the destina
tion memory area specified by the caller is large enough?

Answer: No
Explanation: The question can be simpified to (Can [assert] macro check
 if a particular pointer's memory is free or allocated?)
In C (at least in C), pointer has no information inside them except that
 i points to a certain address. The only thing that assert can do with 
 a pointer is try to access it.
Which will either end up succeeding or failing. Neither makes the assert
 macro useful.


4. Pointer Notations Description:
Pointer Notations were used in both str.c and sgrep.c file. all traversi
ng through / iterating through string objects ware done either with poin
ter increments or pointer arithmetics.
Aside from extra credits, it was a very refreshing and efficient (althou
gh sometimes confusing) way to access arrays. As I more accustomed to co
ding in python, I always accessed array (list) elements with indexes or 
slicing. The pointer notation was a good oppourunity for a different app
roach to arrays.

5. Time Spent
About 2 whole days (~14 hours of work) was spent in total.
Interstingly, I spent around 5 hours in testing and playing with custom
test cases. I believe I caught myself alot of bugs :)

6. My Assessment on the assignment

6.1. Function-Oriented Programming Experience
As mentioned before, I am much more accustomed to high-level languages.
 So I always had a disliking for function-oriented programming styles. 
 But I think this assignment was the first assignment that I got to sta
 rt respecting the art of coding in c.
As I spent hours trying to implement the most basics functions in c 
without bugs, it really made me think how much we take these functiona
lities for granted.

6.2. Some Ambiguities
I think it would be useful to clear some critical ambiguities in the 
coming years of this assignment. Below are some of the ambiguities th
at i spent the most time on.

6.2.1. Argument Validation.
Which arguments to validate (size-check) and where in the skeleton code
 we should do it. I got the answer for this question in CLASSUM. Thanks
  again to TA for clearing this problem.

6.2.2. .txt file Line endings Settings (Ubuntu)
In creating test cases, it is crucial to have the right Line endings 
settings for creating .txt files. Especially for edge cases (empty fi
les, files with one "\n" difference, etc.). It is really important to
 use GNU line ending format.
I referred to CLASSUM #134 (EE209A 2020 fall) to clear this issue. I 
think It would be useful to add instructions (such as [$ echo $'STRIN
G' > FILENAME.txt] command) in the assignment webpage to help people 
looking to create their own test cases.

7. Favorable Aspects for Grading
I worked espicially rigourously in this assignment to extensively test
 my code (especially sgrep.) Aside from getting a better grade in an a
 ssignment, I hope this helped me in becoming a better programmer.
Also, I minimized the use of global variables.
I also learned that I still need more experience in c. I spent nearly 
hours trying to figure out simple problems (like initializng and clear
ing buffers!).
But yet again, this was another fun experince. I also hope the TA's ha
ve a fun time grading my work too!